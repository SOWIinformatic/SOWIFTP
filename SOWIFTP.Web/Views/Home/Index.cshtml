
<h1 class="mb-4">SOWI FTP Web Tool</h1>

<div class="container mt-4">
    <div class="accordion" id="accordionFTPtool">

        <!-- Projekt Accordion Item -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingProjekt">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseProjekt" aria-expanded="true" aria-controls="collapseProjekt">
                    Projekt
                </button>
            </h2>
            <div id="collapseProjekt" class="accordion-collapse collapse show" aria-labelledby="headingProjekt" data-bs-parent="#accordionFTPtool">
                <div class="accordion-body">
                    <h1>KI Programmierung</h1>
                    <h2>
                        Experimentelles Programmieren mit KI-Unterstützung: <br />
                        Beschleunigung der Programmierung durch maschinelles Lernen
                    </h2>
                    <p>Das Projekt konzentriert sich auf die Entwicklung eines webbasierten FTP-Tool-Programms mit Hilfe von Künstlicher Intelligenz, um die Geschwindigkeit und Genauigkeit der Programmierung zu testen.</p>

                    <h2>Resultat der Projektarbeiten:</h2>
                    <ol>
                        <li><strong>Generierung von Basiscode:</strong> Die KI analysiert umfangreiche Code-Datenbanken und extrahiert Muster und Best Practices. Basierend auf spezifischen Anforderungen generiert sie automatisch Grundgerüste von Code-Segmenten, die als Ausgangspunkt für die weitere Entwicklung dienen und inspirieren.</li>

                        <li><strong>Beschleunigte Programmierung:</strong> Durch die Nutzung von vorherigen Projekten, KI-unterstützte Algorithmen und den Zugang zu umfassenden Ressourcen kann das Programmiererteam schneller Prototypen erstellen und Iterationen durchführen. Dies verkürzt die Entwicklungszeiten erheblich.</li>

                        <li><strong>Stabilität und Korrektheit:</strong> Die KI überprüft automatisch generierten Code auf Fehler und Inkonsistenzen. Durch maschinelles Lernen wird sie kontinuierlich verbessert, um die Stabilität zu erhöhen und sicherzustellen, dass der erstellte Code den besten Praktiken und Industriestandards entspricht. Dabei stößt die KI an ihre Grenzen, insbesondere bei neuen Techniken, für die die Datensammlung noch begrenzt ist. Hier ist die Erfahrung und Kompetenz des Programmierers entscheidend, um die Entwicklungsrichtung zu validieren.</li>

                        <li><strong>Spezifikation der Anforderungen:</strong> Eine präzise Spezifikation der Anforderungen ist entscheidend. Entwickler, die Erfahrung in der Erstellung präziser Spezifikationen haben, sind im Vorteil. Je genauer die Anforderungen definiert sind, desto präzisere Ergebnisse kann die KI aus umfangreichen Datenbanken und maschinellen Lernmodellen liefern.</li>

                        <li><strong>Spezialisierte KI-Modelle:</strong> Unterschiedliche Datensammlungen und spezialisierte KI-Modelle wie GitHub Copilot, Tabnine usw. sind gezielt auf verschiedene Themen zugeschnitten. Sie bieten einzigartige Vorteile durch ihre Fähigkeit, spezifische Anwendungsprobleme effizient zu lösen und fachliche Lösungen zu generieren.</li>
                    </ol>

                    <h2>Fazit</h2>
                    <p>KI-basierte Ansätze bieten eine leistungsfähige Methode, um die Softwareentwicklung zu beschleunigen und die Qualität der Ergebnisse zu verbessern. Eine präzise Spezifikation der Anforderungen ist entscheidend, da sie der KI ermöglicht, genauere und relevantere Vorschläge zu liefern. Durch die Integration von KI in die Softwareentwicklung können wir die Effizienz steigern, innovative Lösungen schneller auf den Markt bringen und die Grenzen dessen, was möglich ist, erweitern. Dabei ist die Erfahrung und Kompetenz des Programmierers entscheidend, um die Resultate korrekt zu interpretieren und zu validieren.</p>
                </div>
            </div>
        </div>

        <!-- Haftungsausschluss Accordion Item -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingHaftungsausschluss">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseHaftungsausschluss" aria-expanded="false" aria-controls="collapseHaftungsausschluss">
                    Haftungsausschluss
                </button>
            </h2>
            <div id="collapseHaftungsausschluss" class="accordion-collapse collapse" aria-labelledby="headingHaftungsausschluss" data-bs-parent="#accordionFTPtool">
                <div class="accordion-body">
                    <h1>Haftungsausschluss für die Nutzung des webbasierten FTP-Tools</h1>
                    <p>Die Nutzung des webbasierten FTP-Tools ("Tool") erfolgt auf eigenes Risiko. Durch die Verwendung dieses Tools erklären Sie sich mit den nachstehenden Bedingungen einverstanden:</p>
                    <ul>
                        <li><strong>Keine Gewährleistung für Sicherheit:</strong> Obwohl wir angemessene Sicherheitsvorkehrungen treffen, um die Sicherheit des Tools zu gewährleisten, können wir keine Garantie für die Sicherheit Ihrer Daten übernehmen. Die Übertragung von Daten über das Internet birgt immer ein gewisses Risiko.</li>
                        <li><strong>Haftungsausschluss für Datenverlust:</strong> Wir übernehmen keine Haftung für den Verlust, die Beschädigung oder die Offenlegung Ihrer Daten während der Nutzung des Tools. Es obliegt Ihrer Verantwortung, regelmäßig Backups Ihrer Daten zu erstellen.</li>
                        <li><strong>Einschränkung der Nutzung:</strong> Die Nutzung des Tools erfolgt ausschließlich zu legalen Zwecken. Sie sind dafür verantwortlich, sicherzustellen, dass die von Ihnen übermittelten Daten keine Rechte Dritter verletzen und keine gesetzwidrigen Inhalte enthalten.</li>
                        <li><strong>Änderungen am Tool:</strong> Wir behalten uns das Recht vor, das Tool jederzeit zu ändern, zu aktualisieren oder zu beenden, ohne dass uns daraus Ihnen gegenüber irgendwelche Verpflichtungen entstehen.</li>
                        <li><strong>Keine Haftung für Dritte:</strong> Wir haften nicht für Handlungen oder Unterlassungen Dritter, die sich auf Ihre Nutzung des Tools auswirken könnten, einschließlich Unterbrechungen der Dienstleistung oder Sicherheitsverletzungen.</li>
                        <li><strong>Haftungsbeschränkung:</strong> In keinem Fall haften wir Ihnen oder Dritten gegenüber für besondere, indirekte, zufällige oder Folgeschäden, die sich aus der Nutzung oder Unmöglichkeit der Nutzung des Tools ergeben, auch wenn wir auf die Möglichkeit solcher Schäden hingewiesen wurden.</li>
                    </ul>
                    <p>Durch die Nutzung des Tools erklären Sie sich mit diesen Bedingungen einverstanden und verzichten auf alle Ansprüche gegen uns im Zusammenhang mit der Nutzung des Tools.</p>
                </div>
            </div>
        </div>

        <!-- Tool Accordion Item -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTool">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTool" aria-expanded="false" aria-controls="collapseTool">
                    Tool
                </button>
            </h2>
            <div id="collapseTool" class="accordion-collapse collapse" aria-labelledby="headingTool" data-bs-parent="#accordionFTPtool">
                <div class="accordion-body">

                    <div class="mt-4">
                        <div class="form-group">
                            <label for="serverInput">Server:</label>
                            <input type="text" class="form-control" id="serverInput">
                        </div>
                        <div class="form-group">
                            <label for="usernameInput">Username:</label>
                            <input type="text" class="form-control" id="usernameInput">
                        </div>
                        <div class="form-group">
                            <label for="passwordInput">Password:</label>
                            <input type="password" class="form-control" id="passwordInput">
                        </div>
                        <div class="form-group">
                            <label for="pathInput">Path:</label>
                            <input type="text" class="form-control" id="pathInput">
                        </div>
                    </div>

                    <div class="mt-4">
                        <h2>List Files</h2>
                        <button type="button" class="btn btn-secondary" onclick="listFiles()">List Files</button>
                    </div>

                    <div class="mt-4">
                        <h2>List Directories</h2>
                        <button type="button" class="btn btn-secondary" onclick="listDirectories()">List Directories</button>
                    </div>

                    <div class="mt-4">
                        <h2>List Files and Directories</h2>
                        <button type="button" class="btn btn-secondary" onclick="listFilesAndDirectories()">List Files and Directories</button>
                    </div>

                    <div class="mt-4">
                        <h2>Upload File</h2>
                        <form id="uploadForm" enctype="multipart/form-data">
                            <div class="form-group">
                                <button type="button" class="btn btn-secondary" onclick="uploadFile()">Upload</button>
                                <label for="fileInput">File: </label>
                                <input type="file" class="form-control-file" id="fileInput">
                            </div>
                        </form>
                    </div>

                    <div class="mt-4">
                        <h2>Delete File</h2>
                        <div class="row">
                            <div class="col-auto">
                                <button type="button" class="btn btn-secondary" onclick="deleteFile()">Delete File</button>
                            </div>
                            <div class="col-auto">
                                <label for="selectedItem" class="pt-2">File:</label>
                            </div>
                            <div class="col">
                                <div id="selectedItem"></div>
                            </div>
                            <div class="col">
                                <div id="outputFiles"></div>
                            </div>
                        </div>
                    </div>


                    <div id="output" class="mt-4"></div>
                </div>
            </div>
        </div>

        <!--API Accordion Item -->
        @{
            bool accordionItemAPIvisible = false;
#if DEBUG
            accordionItemAPIvisible = true;
#endif
        }
        @if (accordionItemAPIvisible)
        {
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingAPI">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAPI" aria-expanded="false" aria-controls="collapseAPI">
                        API
                    </button>
                </h2>
                <div id="collapseAPI" class="accordion-collapse collapse" aria-labelledby="headingAPI" data-bs-parent="#accordionFTPtool">
                    <div class="accordion-body">
                        <div class="iframe-container">
                            <iframe src="~/swagger/index.html" frameborder="0" allowfullscreen></iframe>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>

<script>

    //// Store data in localStorage
    //localStorage.setItem('key', 'value');

    //// Retrieve data from localStorage
    //const storedValue = localStorage.getItem('key');

    //// Remove an item from localStorage
    //localStorage.removeItem('key');

    //// Clear all items from localStorage
    //localStorage.clear();

    // Save data to JSON file
    function saveData() {
        const server = document.getElementById('serverInput').value;
        const username = document.getElementById('usernameInput').value;
        const password = document.getElementById('passwordInput').value;
        const path = document.getElementById('pathInput').value;

        const data = {
            server: server,
            username: username,
            password: password,
            path: path
        };

        const jsonString = JSON.stringify(data);
        localStorage.setItem('ftpData', jsonString);
    }

    function loadData() {
        // Load data from JSON file
        const jsonString = localStorage.getItem('ftpData');
        if (jsonString) {
            const data = JSON.parse(jsonString);
            document.getElementById('serverInput').value = data.server;
            document.getElementById('usernameInput').value = data.username;
            document.getElementById('passwordInput').value = data.password;
            document.getElementById('pathInput').value = data.path;
        }
    }

    @{
#if DEBUG
    string rootUrl = "https://localhost:7009";
#endif
#if RELEASE
    string rootUrl = "https://sowi.ch/ftptool";
#endif
    }

    // Call loadData function when the page loads
    window.onload = loadData;

    // Call saveData function when any input value changes
    document.getElementById('serverInput').addEventListener('change', saveData);
    document.getElementById('usernameInput').addEventListener('change', saveData);
    document.getElementById('passwordInput').addEventListener('change', saveData);
    document.getElementById('pathInput').addEventListener('change', saveData);


    async function listFiles() {
        const server = document.getElementById('serverInput').value;
        const username = document.getElementById('usernameInput').value;
        const password = document.getElementById('passwordInput').value;
        const path = document.getElementById('pathInput').value;

        const data = { Server: server, Username: username, Password: password, Path: path };

        const response = await fetch('@rootUrl/api/FTPservice/GetFiles', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            const files = await response.json();
            displayItems(files);
        } else {
            displayError('Failed to list files');
        }
    }

    async function listDirectories() {
        const server = document.getElementById('serverInput').value;
        const username = document.getElementById('usernameInput').value;
        const password = document.getElementById('passwordInput').value;
        const path = document.getElementById('pathInput').value;

        const data = { Server: server, Username: username, Password: password, Path: path };

        const response = await fetch('@rootUrl/api/FTPservice/GetDirectories', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            const directories = await response.json();
            displayItems(directories);
        } else {
            displayError('Failed to list directories');
        }
    }

    async function listFilesAndDirectories() {
        const server = document.getElementById('serverInput').value;
        const username = document.getElementById('usernameInput').value;
        const password = document.getElementById('passwordInput').value;
        const path = document.getElementById('pathInput').value;

        const data = { Server: server, Username: username, Password: password, Path: path };

        const response = await fetch('@rootUrl/api/FTPservice/GetFilesAndDirectories', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            const items = await response.json();
            displayItems(items);
        } else {
            displayError('Failed to list files and directories');
        }
    }


    async function uploadFile() {
        const fileInput = document.getElementById('fileInput');
        const server = document.getElementById('serverInput').value;
        const username = document.getElementById('usernameInput').value;
        const password = document.getElementById('passwordInput').value;
        const path = document.getElementById('pathInput').value;

        const formData = new FormData();
        formData.append('file', fileInput.files[0]);
        formData.append('ftpConnection.Server', server);
        formData.append('ftpConnection.Username', username);
        formData.append('ftpConnection.Password', password);
        formData.append('ftpConnection.Path', path);

        const response = await fetch('@rootUrl/api/FTPservice/UploadFile', {
            method: 'POST',
            body: formData
        });

        const output = document.getElementById('output');
        if (response.ok) {
            output.textContent = 'File uploaded successfully';
        } else {
            displayError('Upload failed');
        }
    }

    async function deleteFile() {
        const server = document.getElementById('serverInput').value;
        const username = document.getElementById('usernameInput').value;
        const password = document.getElementById('passwordInput').value;
        const path = document.getElementById('pathInput').value;
        const selectedItem = document.getElementById('selectedItem').textContent;

        if (!selectedItem) {
            displayError('No file selected for deletion');
            return;
        }

        const formData = new FormData();
        formData.append('fileName', selectedItem);
        formData.append('ftpConnection.Server', server);
        formData.append('ftpConnection.Username', username);
        formData.append('ftpConnection.Password', password);
        formData.append('ftpConnection.Path', path);

        const queryString = new URLSearchParams(formData).toString();

        // TODO: Verschlüsselte Übertragung!
        const response = await fetch('@rootUrl/api/FTPservice/DeleteFile?' + queryString, {
            method: 'DELETE'
        });

        const output = document.getElementById('output');
        if (response.ok) {
            output.textContent = 'File deleted successfully';
        } else {
            displayError('Failed to delete file');
        }
    }

    function displayItems(items) {
        const output = document.getElementById('output');
        output.innerHTML = '';

        const selectedItemDiv = document.getElementById('selectedItem');
        selectedItemDiv.classList.add('form-control', 'd-none');

        items.forEach(item => {
            const div = document.createElement('div');
            div.textContent = item;
            div.classList.add('list-group-item', 'list-group-item-action');

            // Add click event listener to each item
            div.addEventListener('click', () => {
                // Save the selected item in a variable
                const selectedItem = item;
                // Update the content of the selectedItemDiv
                selectedItemDiv.textContent = selectedItem;
                selectedItemDiv.classList.remove('d-none');
            });

            output.appendChild(div);
        });
    }

    function displayError(message) {
        const output = document.getElementById('output');
        output.innerHTML = '';

        const alertDiv = document.createElement('div');
        alertDiv.classList.add('alert', 'alert-danger', 'alert-dismissible', 'fade', 'show');
        alertDiv.setAttribute('role', 'alert');

        const alertContent = document.createElement('div');
        alertContent.textContent = message;

        const closeButton = document.createElement('button');
        closeButton.classList.add('btn-close');
        closeButton.setAttribute('type', 'button');
        closeButton.setAttribute('data-bs-dismiss', 'alert');
        closeButton.setAttribute('aria-label', 'Close');

        alertDiv.appendChild(alertContent);
        alertDiv.appendChild(closeButton);

        output.appendChild(alertDiv);
    }

</script>
